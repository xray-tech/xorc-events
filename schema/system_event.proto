package events;

import "common/header.proto";

message SystemEvent
{
    required common.Header header = 1;
    required string name = 2;
}

message RuleEngineTick
{
    required common.Header header = 1;
    optional string universe = 2;
}

message Timer
{
  required common.Header header = 1;

  enum Action {
    CREATE = 1;
    CANCEL = 2;
  }

  optional Action action = 2 [default=CREATE];

  required string correlation_id = 3;

  // Payload to be sent
  optional bytes payload = 4;

  // to which exchange.
  optional string exchange = 5;

  // timestamp in second from epoch
  optional uint64 expire_at = 6;
}

message TimerExpired
{
  required common.Header header = 1;

  required string correlation_id = 2;
  optional string universe = 3;
}

message Profiler
{
  required common.Header header = 1;

  enum Action {
    ATTACH = 1;
    DETACH = 2;
    REPORT = 3;
  }

  optional Action action = 2 [default=ATTACH];
  optional string universe = 3;
  optional string pid = 4;
}


// Requests the Broadcast service to perform an 
// action for all entities in the specified universe.
message BroadcastRequest
{
    required common.Header header = 1;
    required string correlation_id = 2;
    required string universe = 3;

    enum Action
    {
        NOOP = 1;
        TICK = 2;
    }

    required Action action = 4;
}

// Message sent to the Rule Engine to restart a give program id in a given univere.
message RestartProgram
{
    required common.Header header = 1;
    required string universe = 2;
    required string pid = 3;
}
